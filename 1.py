import os
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split



malware_dir = 'malware'
malware_files = os.listdir(malware_dir)
data = []



for file_name in malware_files:
    with open(os.path.join(malware_dir, file_name), 'rb') as file:
        # data preprocessing functions
        data.append(features)



benign_dir = 'benign'
benign_files = os.listdir(benign_dir)



for file_name in benign_files:
    with open(os.path.join(benign_dir, file_name), 'rb') as file:
        #preprocessing functionst
        data.append(features)



labels = np.concatenate((np.ones(len(malware_files)), np.zeros(len(benign_files))))


X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)


input_shape = X_train[0].shape

model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(np.array(X_train), np.array(y_train), epochs=10, batch_size=32)

_, accuracy = model.evaluate(np.array(X_test), np.array(y_test), verbose=0)
print(f"Accuracy: {accuracy}")


file_to_predict = open('file_to_predict.exe', 'rb')
#preprocessing f
features = preprocess(file_to_predict)

prediction = model.predict(np.array([features]))
print("Prediction:", prediction)


