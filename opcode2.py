


import lief

def opcode_frequency(file_path):
    binary = lief.parse(file_path)
    opcode_count = {}
    for function in binary.functions:
        for instruction in function.instructions:
            opcode = instruction.mnemonic.lower()
            opcode_count.setdefault(opcode, 0)
            opcode_count[opcode] += 1
    return opcode_count

def ngram_frequency(file_path, n):
    binary = lief.parse(file_path)
    ngrams = []
    for function in binary.functions:
        instructions = [instruction.mnemonic.lower() for instruction in function.instructions]
        ngrams.extend([tuple(instructions[i:i+n]) for i in range(len(instructions)-n+1)])
    
    ngram_count = {}
    
    for ngram in ngrams:
        ngram_count.setdefault(ngram, 0)
        ngram_count[ngram] += 1
    
    return ngram_count

file_path = 'file.exe'
opcode_freq = opcode_frequency(file_path)
ngram_freq = ngram_frequency(file_path, n=3)


