import ast

class DataFlowAnalyzer(ast.NodeVisitor):
    def __init__(self):
        self.variable_dependencies = {}

    def visit_Assign(self, node):
        target = node.targets[0].id
        value = self.get_value(node.value)
        self.variable_dependencies[target] = value
        self.generic_visit(node)

    def visit_FunctionDef(self, node):
        print(f"Analyzing function: {node.name}")
        self.generic_visit(node)
        print(f"Dependencies: {self.variable_dependencies}")
        self.variable_dependencies = {}

    def get_value(self, node):
        if isinstance(node, ast.Call):
            return self.get_value(node.func)
        elif isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Str):
            return node.s
        return None

def analyze_script(script_path):
    with open(script_path, "r") as f:
        tree = ast.parse(f.read(), script_path)

    analyzer = DataFlowAnalyzer()
    analyzer.visit(tree)

if __name__ == "__main__":
    analyze_script("dfa_malware_example.py")
